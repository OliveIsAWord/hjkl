#INCLUDE "vec.hjk"
#INCLUDE "rtl.hjk"

#DEFINE BUFFER_OVERALLOC 0

STRUCT Piece
    Start : ULONG,
    Length : ULONG,
END

VecOf (
    Piece,
    VecPiece,
    VecPieceWithCapacity,
    VecPieceNull,
    VecPieceFree,
    VecPieceGrow,
    VecPieceReserveOne,
    VecPieceReserveAt,
    VecPieceRemove,
)

// The piece table, a simple text data structure suited for efficient, arbitrary edits across a file.
STRUCT Pt
    Data : VecUbyte, // Append-only array of all characters added to the text buffer.
    Pieces : VecPiece, // Spans of `Data` that make up the current text buffer.
END

// Construct an empty piece table.
FN PtNull (
    IN table : ^Pt,
)
    VecUbyteNull(&table^.Data)
    VecPieceNull(&table^.Pieces)
END

// Construct and initialize a piece table from a file.
FN PtInit (
    IN file : ^File,
    IN table : ^Pt,
)
    length := GetSize(file)
    VecUbyteWithCapacity(length + BUFFER_OVERALLOC, &table^.Data)
    Read(file, table^.Data.Elems, length)
    table^.Data.Length = length
    VecPieceWithCapacity(1, &table^.Pieces)
    table^.Pieces.Length = 1
    table^.Pieces.Elems^.Start = 0
    table^.Pieces.Elems^.Length = length
END

// Free a piece table.
FN PtFree (
    IN self : ^Pt,
)
    VecUbyteFree(&self^.Data)
    VecPieceFree(&self^.Pieces)
END

FN PtLength (
    IN self : ^Pt,
) : UWORD
    length := 0
    i := 0
    WHILE i < self^.Pieces.Length DO
        length += self^.Pieces.Elems[i].Length
        i += 1
    END
    RETURN length
END

// Given a byte index, return the index of the piece containing that byte and the byte offset within that piece.
FN PtSeek (
    IN self : ^Pt,
    IN seek_to : UWORD,
    OUT offset : UWORD,
) : UWORD
    i := 0
    seek_at := 0
    WHILE i < self^.Pieces.Length DO
        len := self^.Pieces.Elems[i].Length
        IF seek_at + len > seek_to THEN
            offset = seek_to - seek_at
            RETURN i
        END
        seek_at += len
        i += 1
    END
    offset = 0
    RETURN i
END

// Given a piece index and byte offset within that piece, return the byte at that position.
FN PtAt (
    IN self : ^Pt,
    IN piece_index : UWORD,
    IN byte_offset : UWORD,
) : UBYTE
    start := &self^.Pieces.Elems[piece_index].Start
    RETURN self^.Data.Elems[start + byte_offset]
END

// Insert a new character at some byte offset.
FN PtInsert (
    IN self : ^Pt,
    IN position : UWORD,
    IN char : UBYTE,
)
    offset : UWORD
    piece_index := PtSeek(self, position, OUT offset)
    IF offset == 0 THEN
        is_at_end := 0
        IF piece_index > 0 THEN
            original := &self^.Pieces.Elems[piece_index - 1]
            IF original^.Start + original^.Length == self^.Data.Length THEN
                is_at_end = 1
                original^.Length += 1 // Modify the previous piece to be one longer
            END
       END
       IF is_at_end == 0 THEN
            piece_new := VecPieceReserveAt(&self^.Pieces, piece_index, 1) // Allocate a new piece right *before* the current one
            piece_new^.Start = self^.Data.Length
            piece_new^.Length = 1
        END
        VecUbyteReserveOne(&self^.Data)^ = char
    ELSE
        piece_new := VecPieceReserveAt(&self^.Pieces, piece_index + 1, 2) // Allocate two pieces right *after* the current one; the first contains new data, the second the rest of the original piece
        piece_left := &self^.Pieces.Elems[piece_index]
        piece_right := &piece_new[1]
        piece_right^.Start = piece_left^.Start + offset
        piece_right^.Length = piece_left^.Length - offset
        piece_left^.Length = offset
        piece_new^.Start = self^.Data.Length
        piece_new^.Length = 1
        VecUbyteReserveOne(&self^.Data)^ = char
    END
END

// Remove the character at some byte offset.
FN PtDelete (
    IN self : ^Pt,
    IN position : UWORD,
)
    offset : UWORD
    piece_index := PtSeek(self, position, OUT offset)
    IF offset == 1 THEN
        piece := &self^.Pieces.Elems[piece_index]
        piece^.Start += 1
        piece^.Length -= 1
        LEAVE
    END
    IF offset > 0 THEN
        // Assert(0, "todo offset", piece_index, offset)
        new_piece := VecPieceReserveAt(&self^.Pieces, piece_index + 1, 1)
        piece := &self^.Pieces.Elems[piece_index]
        new_piece^.Start = piece^.Start + offset
        new_piece^.Length = piece^.Length - offset
        piece^.Length = offset - 1
        LEAVE
    END
    IF piece_index == 0 THEN LEAVE END
    piece := &self^.Pieces.Elems[piece_index - 1]
    IF piece^.Length > 1 THEN
        piece^.Length -= 1
    ELSE
        VecPieceRemove(&self^.Pieces, piece_index - 1)
    END
END

FN StrDebug (
    IN str : ^UBYTE,
    IN length : UWORD,
)
    RtlPrint("\"")
    i := 0
    WHILE i < length DO
        c := str[i]
        IF c == '"' THEN
            RtlPrint("\\\"")
        ELSEIF c == '\\' THEN
            RtlPrint("\\\\")
        ELSEIF ' ' <= c AND c <= '~' THEN
            RtlPrint("%c", c)
        ELSEIF c == '\n' THEN
            RtlPrint("\\n")
        ELSE 
            RtlPrint("\\x%02x", c)
        END
        i += 1
    END
    RtlPrint("\"")
END

FN PtDebug (
    IN self : ^Pt,
)
    length := self^.Pieces.Length
    RtlPrint("[Pt, Data: %db, %d Pieces]\n", self^.Data.Length, length)
    i := 0
    WHILE i < length DO
        piece := &self^.Pieces.Elems[i]
        RtlPrint("%d - Start: %d Length: %d ", i, piece^.Start, piece^.Length)
        StrDebug(&self^.Data.Elems[piece^.Start], piece^.Length)
        RtlPrint("\n")
        i += 1
    END
END
