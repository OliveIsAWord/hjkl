#INCLUDE "vec.hjk"

#DEFINE BUFFER_OVERALLOC 0

STRUCT Piece
    Start : ULONG,
    Length : ULONG,
END

VecOf (
    Piece,
    VecPiece,
    VecPieceWithCapacity,
    VecPieceNull,
    VecPieceFree,
    VecPieceGrow,
    VecPieceReserveOne,
    VecPieceReserveAt,
)

// The piece table, a simple text data structure suited for efficient, arbitrary edits across a file.
STRUCT Pt
    Data : VecUbyte, // Append-only array of all characters added to the text buffer.
    Pieces : VecPiece, // Spans of `Data` that make up the current text buffer.
END

// Construct an empty piece table.
FN PtNull (
    IN table : ^Pt,
)
    VecUbyteNull(&table^.Data)
    VecPieceNull(&table^.Pieces)
END

// Construct and initialize a piece table from a file.
FN PtInit (
    IN file : ^File,
    IN table : ^Pt,
)
    length := GetSize(file)
    VecUbyteWithCapacity(length + BUFFER_OVERALLOC, &table^.Data)
    Read(file, table^.Data.Elems, length)
    table^.Data.Length = length
    VecPieceWithCapacity(1, &table^.Pieces)
    table^.Pieces.Length = 1
    table^.Pieces.Elems^.Start = 0
    table^.Pieces.Elems^.Length = length
END

// Free a piece table.
FN PtFree (
    IN self : ^Pt,
)
    VecUbyteFree(&self^.Data)
    VecPieceFree(&self^.Pieces)
END

// Given a byte index, return the index of the piece containing that byte and the byte offset within that piece.
FN PtSeek (
    IN self : ^Pt,
    IN seek_to : UWORD,
    OUT offset : UWORD,
) : WORD
    i := 0
    seek_at := 0
    WHILE i < self^.Pieces.Length DO
        len := self^.Pieces.Elems[i].Length
        IF seek_at + len > seek_to THEN
            offset = seek_to - seek_at
            RETURN i
        END
        seek_at += len
        i += 1
    END
    Assert(0, "out of bounds", seek_to, i)
    // RETURN -1
END

// Given a piece index and byte offset within that piece, return the byte at that position.
FN PtAt (
    IN self : ^Pt,
    IN piece_index : UWORD,
    IN byte_offset : UWORD,
) : UBYTE
    start := &self^.Pieces.Elems[piece_index].Start
    RETURN self^.Data.Elems[start + byte_offset]
END

// Insert a new character at some byte offset.
FN PtInsert (
    IN self : ^Pt,
    IN position : UWORD,
    IN char : UBYTE,
)
    offset : UWORD
    piece := PtSeek(self, position, OUT offset)
    Assert(offset == 0, "todo: insert inside piece", CAST piece TO UWORD, position)
    Assert(piece >= 0, "todo: insert at end of file", CAST piece TO UWORD, position)
    new_piece := VecPieceReserveAt(&self^.Pieces, CAST piece TO UWORD, 1)
    new_piece^.Start = self^.Data.Length
    new_piece^.Length = 1
    VecUbyteReserveOne(&self^.Data)^ = char
END
