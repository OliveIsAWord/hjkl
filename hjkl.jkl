#ASM [
pop a0 // streamPtr
pop a1 // arg0
pop a2 // arg1
pop a3 // arg2
// arg3 is now on the top of stack
call Main
]

// Hey, this comment is getting a little long, don't you think?

// macro definitions to make the Rtl library happy
#DEFINE BLD_BITS 32
#DEFINE ARCHITECTURE "fox32"

#INCLUDE "rtl.hjk" // Printing functionality
#INCLUDE "rom.hjk" // fox32os bindings
#INCLUDE "os.hjk" // fox32rom bindings
#INCLUDE "pt.jkl" // piece table implementation

EXTERN menu_bar : Menu // data table defining a menu bar in fox32os' required format
#ASM [
menu_bar:
    .db 1
    .dp menu_file_items
    .dp menu_file_name
menu_file_name:
    .db 4 .ds "File" .db 0
menu_file_items:
    .db 1
    .db 6
    .db 4 .ds "Save" .db 0
]

STRUCT FileLocation
    Disk : UBYTE,
    Name : ^UBYTE,
END

stream : ^File = NULLPTR // stdin and stdout
file_loc : FileLocation // the disk id and name of the opened file
window : Window // our gui window
window_title := "Hjkl - 0:12345678.123" // text displayed at the title bar
table : Pt // text data
view_byte_offset : UWORD = 0 // start of text view
cursor : UWORD = 0 // cursor position within file in bytes
cursor_desired_offset : UWORD = 0 // how many columns further the cursor should "stick" to
line_mode_visual : UBYTE = TRUE // Navigate by visual lines instead of absolute ones
width : UBYTE = 32 // number of columns in the view buffer
height : UBYTE = 20 // number of rows in the view buffer
redraw : UBYTE = TRUE // redraw the text buffer?
view_buffer : ^UBYTE = NULLPTR // a 2D array representing the visible portion of the text buffer
is_ctrl : UBYTE = FALSE // is the user holding the Ctrl key?

// Bitbee
// palette_fg : ULONG = 0xFF302B29
// palette_bg : ULONG = 0xFF4AABCF
// Paper palette
color_fg : ULONG = 0xFF3E3E3E
color_bg : ULONG = 0xFFC1E7F6
color_gutter : ULONG = 0xFFF0F8FF
// color_ultradark : ULONG = 0xFF242018

// Function used by printing library to emit characters
FN (RtlPrintCallbackF) RtljPrintCallback (
    IN byte : UBYTE,
    IN context : ^VOID,
)
    buffer : UBYTE[1]
    buffer[0] = byte
    Write(stream, &buffer[0], 1)
END

// 1-bit images for each hexidecimal digit, for displaying non-printable bytes
small_digits : UINT[16] = {
    075557,
    026227,
    061247,
    061616,
    055711,
    074716,
    034757,
    071122,
    075757,
    075711,
    025755,
    065656,
    034443,
    065556,
    074647,
    074644,
}

FN Exit ()
    IF window.FrameBuffer THEN
        DestroyWindow(&window)
    END
    IF view_buffer THEN
        FreeMemory(view_buffer)
    END
    PtFree(&table)
    EndCurrentTask()
END

FN Assert (
    IN condition : UBYTE,
    IN label : ^UBYTE,
    IN arg1 : UWORD,
    IN arg2 : UWORD,
)
    IF NOT condition THEN
        RtlPrint("Assertion error: %s\nArg1: %d\nArg2: %d\n", label, arg1, arg2)
        Exit()
    END
END

FN ParseFilePath (
    IN fp : ^UBYTE,
    IN loc : ^FileLocation,
)
    IF fp[0] >= '0' AND fp[0] <= '9' AND fp[1] == ':' THEN
        loc^.Disk = fp[0] - '0'
        fp += 2
    END
    loc^.Name = fp
END

FN SaveFile ()
    file : File
    sector := Create(file_loc.Name, file_loc.Disk, &file, PtLength(&table))
    Assert(sector, "no room sory", file_loc.Disk, PtLength(&table))
    i := 0
    WHILE i < table.Pieces.Length DO
        piece := &table.Pieces.Elems[i]
        Write(&file, &table.Data.Elems[piece^.Start], piece^.Length)
        i += 1
    END
END

// Get the position of the given index within its line. The returned value will always be less than or equal to the input.
FN LineStartOffsetAbsolute (
    IN position : UWORD
) : UWORD
    i := 0
    WHILE i < position AND PtAt(&table, position - i - 1) != '\n' DO
        i += 1
    END
    RETURN i
END

// Get how far the end of the line is after the given index.
FN LineEndOffsetAbsolute (
    IN position : UWORD
) : UWORD
    i := 0
    WHILE
        position + i < PtLength(&table) AND
        PtAt(&table, position + i) != '\n'
    DO
        i += 1
    END
    RETURN i
END

// `LineStartOffsetAbsolute` accounting for `line_mode_visual`.
FN LineStartOffset (
    IN position : UWORD
) : UWORD
    offset := LineStartOffsetAbsolute(position)
    IF line_mode_visual THEN
        offset %= width
    END
    RETURN offset
END

FN CursorMoveLeft()
    IF cursor THEN
        cursor -= 1
        redraw = TRUE
    END
    cursor_desired_offset = 0
END

FN CursorMoveRight()
    IF cursor < PtLength(&table) THEN
        cursor += 1
        redraw = TRUE
    END
    cursor_desired_offset = 0
END

FN CursorMoveUp()
    len := LineStartOffset(cursor)
    // if we're on the first line, don't move the cursor
    IF cursor == len THEN
        LEAVE
    END
    redraw = TRUE
    prev_len := LineStartOffset(cursor - len - 1)
    desired_len := len + cursor_desired_offset
    move_by := len
    IF prev_len >= desired_len THEN
        move_by = prev_len - cursor_desired_offset
        cursor_desired_offset = 0
    ELSE
        cursor_desired_offset = desired_len - prev_len
    END
    cursor -= move_by + 1
END

FN CursorMoveDown()
    next_line_offset := LineEndOffsetAbsolute(cursor)
    next_line := cursor + next_line_offset + 1
    IF next_line > PtLength(&table) THEN
        diff := next_line - PtLength(&table)
        Assert(diff == 1, "CursorMoveDown", diff, cursor)
        LEAVE
    END
    redraw = TRUE
    next_line_len := LineEndOffsetAbsolute(next_line)
    x := LineStartOffset(cursor)
    desired_x := x + cursor_desired_offset
    IF next_line_len >= desired_x THEN
        cursor = next_line + desired_x
        cursor_desired_offset = 0
    ELSE
        cursor = next_line + next_line_len
        cursor_desired_offset = desired_x - next_line_len
    END
END

FN CursorMoveLineStart()
    offset := LineStartOffsetAbsolute(cursor)
    IF offset THEN
        cursor -= offset
        redraw = TRUE
    END
    cursor_desired_offset = 0
END

FN CursorMoveLineEnd()
    offset := LineEndOffsetAbsolute(cursor)
    IF offset THEN
        cursor += offset
        redraw = TRUE
    END
    cursor_desired_offset = 0
END

FN HandleMouseClick (
    IN x : UINT,
    IN y : UINT,
)
    IF y < 16 THEN // User clicked the title bar
        IF x < 8 THEN Exit() END // User clicked the close window button
        // Otherwise, drag the window
        StartDraggingWindow(&window) // NOTE: This blocks *all* tasks, including ours, until the user releases the mouse click
        LEAVE
    END
END

FN HandleMouseRelease (
    IN x : UINT,
    IN y : UINT,
)
END

FN HandleCtrlKeyDown (
    IN scancode : UBYTE,
)
    IF scancode == KEY_S THEN
        SaveFile()
    ELSEIF scancode == KEY_C THEN
        Exit()
    ELSEIF scancode == KEY_F THEN
        CursorMoveRight()
    ELSEIF scancode == KEY_B THEN
        CursorMoveLeft()
    ELSEIF scancode == KEY_P THEN
        CursorMoveUp()
    ELSEIF scancode == KEY_N THEN
        CursorMoveDown()
    ELSEIF scancode == KEY_A THEN
        CursorMoveLineStart()
    ELSEIF scancode == KEY_E THEN
        CursorMoveLineEnd()
    END
END

FN HandleKeyDown (
    IN scancode : UBYTE,
)
    IF scancode == KEY_BACKSPACE THEN
        PtDelete(&table, cursor)
        IF cursor THEN
            cursor -= 1
            redraw = TRUE
        END
    ELSEIF scancode == KEY_CTRL THEN
        is_ctrl = TRUE
    ELSEIF scancode == KEY_LSHIFT OR scancode == KEY_RSHIFT THEN
        ShiftPressed()
    ELSEIF scancode == KEY_CAPS THEN
        CapsPressed()
    ELSEIF scancode == KEY_UP THEN
        CursorMoveUp()
    ELSEIF scancode == KEY_DOWN THEN
        CursorMoveDown()
    ELSEIF scancode == KEY_LEFT THEN
        CursorMoveLeft()
    ELSEIF scancode == KEY_RIGHT THEN
        CursorMoveRight()
    ELSEIF is_ctrl THEN
        HandleCtrlKeyDown(scancode)
    ELSEIF
        // TODO: Support keypad?
        0x02 <= scancode AND scancode <= 0x0D
     OR 0x10 <= scancode AND scancode <= 0x1C // notably, we include the Enter key in this range
     OR 0x1E <= scancode AND scancode <= 0x29
     OR 0x2B <= scancode AND scancode <= 0x35
     OR scancode == 0x39
    THEN
        c := ScancodeToAscii(scancode) // this is affected by ShiftPressed(), etc.
        PtInsert(&table, cursor, c)
        cursor += 1
        redraw = TRUE
    END
END

FN HandleKeyUp (
    IN scancode : UBYTE,
)
    IF scancode == KEY_LSHIFT OR scancode == KEY_RSHIFT THEN
        ShiftReleased()
    ELSEIF scancode == KEY_CTRL THEN
        is_ctrl = FALSE
    END
END

FN HandleMenuClick (
    IN menu : UWORD,
    IN item : UWORD,
)
    Assert(menu == 0 AND item == 0, "invalid menu choice", menu, item)
    SaveFile()
END

// Render the current text buffer to view_buffer
FN RenderViewBuffer ()
    inner_offset : UWORD
    i := PtSeek(&table, view_byte_offset, OUT inner_offset)
    cursor_pos := cursor - view_byte_offset
    x := 0
    buffer_pos := 0
    WHILE buffer_pos < width * height DO
        piece := &table.Pieces.Elems[i]
        c := table.Data.Elems[piece^.Start + inner_offset]
        is_cursor := 0
        IF cursor_pos == 0 THEN
            is_cursor = 1
        END
        cursor_pos -= 1
        IF c == '\n' THEN
            WHILE x < width DO
                view_buffer[buffer_pos * 2] = ' '
                view_buffer[buffer_pos * 2 + 1] = is_cursor
                is_cursor = 0
                buffer_pos += 1
                x += 1
            END
        ELSE
            view_buffer[buffer_pos * 2] = c
            view_buffer[buffer_pos * 2 + 1] = is_cursor
            buffer_pos += 1
            x += 1
        END
        IF x >= width THEN
            x = 0
        END
        inner_offset += 1
        IF inner_offset >= piece^.Length THEN
            inner_offset = 0
            i += 1
            IF i >= table.Pieces.Length THEN
                BREAK
            END
        END
    END
    is_cursor := 0
    IF cursor_pos == 0 THEN
        is_cursor = 1
    END
    WHILE buffer_pos < width * height DO
        view_buffer[buffer_pos * 2] = ' '
        view_buffer[buffer_pos * 2 + 1] = is_cursor
        is_cursor = 0
        buffer_pos += 1
    END
END

FN DrawPixel (
    IN x : UINT,
    IN y : UINT,
    IN color : ULONG,
)
    window.FrameBuffer[window.Width * y + x] = color
END

FN DrawReplacementTile (
    IN c : UBYTE,
    IN x : UINT,
    IN y : UINT,
    IN fg_color : ULONG,
    IN bg_color : ULONG,
)
    i := 1
    WHILE i < 8 DO
        DrawPixel(x + i, y, bg_color)
        DrawPixel(x + i, y + 1, fg_color)
        DrawPixel(x + i, y + 2, bg_color)
        DrawPixel(x + i, y + 8, bg_color)
        DrawPixel(x + i, y + 14, bg_color)
        DrawPixel(x + i, y + 15, fg_color)
        i += 1
    END
    i = 0
    WHILE i < 16 DO
        DrawPixel(x, y + i, bg_color)
        i += 1
    END
    i = 2
    WHILE i < 15 DO
        DrawPixel(x + 1, y + i, fg_color)
        DrawPixel(x + 2, y + i, bg_color)
        DrawPixel(x + 6, y + i, bg_color)
        DrawPixel(x + 7, y + i, fg_color)
        i += 1
    END
    i = 0
    WHILE i <= 1 DO
        half := (c >> (i * 4)) & 0xF
        bit_image := small_digits[half]
        dy := 0
        WHILE dy < 5 DO
            dx := 0
            WHILE dx < 3 DO
                bit_color := bg_color
                IF (bit_image >> (14 - dy * 3 - dx)) & 1 THEN
                    bit_color = fg_color
                END
                DrawPixel(x + 3 + dx, y + 9 + dy - i * 6, bit_color)
                dx += 1
            END
            dy += 1
        END
        i += 1
    END
END

FN DisplayInitial ()
    FillWindow(&window, color_bg)
    y := 0
    WHILE y < height DO
        DrawFontTileToOverlay(' ', 0, y * 16 + 16, 0, color_gutter, window.Overlay)
        DrawFontTileToOverlay(' ', (width + 1) * 8, y * 16 + 16, 0, color_gutter, window.Overlay)
        y += 1
    END
END

FN DisplayViewBuffer ()
    y := 0
    WHILE y < height DO
        x := 0
        WHILE x < width DO
            i := y * width + x
            char := view_buffer[i * 2]
            meta := view_buffer[i * 2 + 1]
            IF
                char == view_buffer[i * 2 + width * height * 2] AND
                meta == view_buffer[i * 2 + 1 + width * height * 2]
            THEN
                x += 1
                CONTINUE
            END
            display_x := (x + 1) * 8
            display_y := (y + 1) * 16
            color1 := color_fg
            color2 := color_bg
            IF meta & 1 THEN
                temp := color1
                color1 = color2
                color2 = temp
            END
            IF 0x20 <= char AND char <= 0x7E THEN
                DrawFontTileToOverlay(char, display_x, display_y, color1, color2, window.Overlay)
            ELSE
                DrawReplacementTile(char, display_x, display_y, color1, color2)
            END
            x += 1
        END
        y += 1
    END
END

EXTERN FN Millis () : UWORD
#ASM [
Millis:
.global Millis
    in a3, 0x80000706
    ret
]

FN PreMain (
    IN stream_ : ^File,
)
    stream = stream_
    file_loc.Name = NULLPTR
    window.FrameBuffer = NULLPTR
    PtNull(&table)
END
    
FN Main (
    IN stream_ : ^File,
    IN arg0 : ^UBYTE,
    IN arg1 : ^UBYTE,
    IN arg2 : ^UBYTE,
    IN arg3 : ^UBYTE,
)
    PreMain(stream_)
    IF NOT arg0 OR arg1 | arg2 | arg3 THEN
        RtlPrint("Usage: hjkl <file>\n")
        Exit()
    END

    // Get filepath to open
    file_loc.Disk = GetCurrentDiskId()
    ParseFilePath(arg0, &file_loc)

    // Open and read file to memory
    IF TRUE THEN
        file : File
        IF NOT Open(file_loc.Name, file_loc.Disk, &file) THEN
            RtlPrint("Could not find file %s\n", file_loc.Name)
            Exit()
        END
        PtInit(&file, &table)
        RtlPrint("opened %d:%s of %d bytes\n", file_loc.Disk, file_loc.Name, GetSize(&file))
    END
    
    // create window title
    IF TRUE THEN
        window_title[7] = '0' + file_loc.Disk
        i := 0
        WHILE TRUE DO
            window_title[i + 9] = file_loc.Name[i]
            IF file_loc.Name[i] == 0 THEN BREAK END
            i += 1
        END
    END

    // allocate the view buffer and imagine the previous frame is blank
    view_buffer = AllocateMemory(width * height * 4)
    IF TRUE THEN
        last_frame := view_buffer + width * height * 2
        i := 0
        WHILE i < width * height DO
            last_frame[i * 2] = ' '
            last_frame[i * 2 + 1] = 0
            i += 1
        END
    END
    
    NewWindow(&window, window_title, (width + 2) * 8, height * 16, 160, 20, &menu_bar, 0)
    DisplayInitial()
    
    WHILE TRUE DO
        // Poll events until our queue is empty
        WHILE TRUE DO
            ev : Event
            GetNextWindowEvent(&window, &ev)
            IF ev.Type == EVENT_TYPE_EMPTY THEN
                BREAK
            ELSEIF ev.Type == EVENT_TYPE_MOUSE_CLICK THEN
                HandleMouseClick(ev.Body.Pos.X, ev.Body.Pos.Y)
            ELSEIF ev.Type == EVENT_TYPE_MOUSE_RELEASE THEN
                HandleMouseRelease(ev.Body.Pos.X, ev.Body.Pos.Y)
            ELSEIF ev.Type == EVENT_TYPE_KEY_DOWN THEN
                HandleKeyDown(ev.Body.Scancode)
            ELSEIF ev.Type == EVENT_TYPE_KEY_UP THEN
                HandleKeyUp(ev.Body.Scancode)
            ELSEIF ev.Type == EVENT_TYPE_MENU_BAR_CLICK THEN
                MenuBarClickEvent(&menu_bar, ev.Body.Pos.X)
            ELSEIF ev.Type == EVENT_TYPE_MENU_UPDATE THEN
                MenuUpdateEvent(&menu_bar, ev.Body.MenuChoice.Menu, ev.Body.MenuChoice.Item)
            ELSEIF ev.Type == EVENT_TYPE_MENU_CLICK THEN
                HandleMenuClick(ev.Body.MenuChoice.Menu, ev.Body.MenuChoice.Item)
            ELSEIF ev.Type == EVENT_TYPE_MENU_ACK THEN
                CloseMenu(&menu_bar)
            ELSE
                // We got a bad type. Ignore it?
            END
        END
        // Redraw the text buffer
        IF redraw THEN
            redraw = FALSE
            t0 := Millis()
            RenderViewBuffer()
            t1 := Millis()
            DisplayViewBuffer()
            t2 := Millis()
            CopyMemoryBytes(view_buffer, view_buffer + width * height * 2, width * height * 2)
            t3 := Millis()
            // RtlPrint("%d %d %d\n", t1-t0, t2-t1, t3-t2)
            // PtDebug(&table)
        END
        YieldTask()
    END
END
